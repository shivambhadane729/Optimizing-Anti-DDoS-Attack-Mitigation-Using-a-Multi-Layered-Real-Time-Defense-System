"""Initial migration

Revision ID: 1a1384bbd00f
Revises: 
Create Date: 2025-06-13 16:38:18.153398+00:00

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '1a1384bbd00f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'alerts', type_='foreignkey')
    op.drop_column('alerts', 'security_event_id')
    op.drop_column('alerts', 'title')
    op.drop_column('alerts', 'description')
    op.drop_column('alerts', 'source')
    op.add_column('attack_logs', sa.Column('target', sa.String(), nullable=False))
    op.add_column('attack_logs', sa.Column('severity', sa.String(), nullable=False))
    op.add_column('attack_logs', sa.Column('action', sa.String(), nullable=False))
    op.add_column('attack_logs', sa.Column('bandwidth_used', sa.Integer(), nullable=True))
    op.alter_column('attack_logs', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('attack_logs', 'duration_seconds',
               existing_type=sa.FLOAT(),
               nullable=True)
    op.alter_column('attack_logs', 'detected_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_index(op.f('ix_attack_logs_attack_type'), table_name='attack_logs')
    op.drop_index(op.f('ix_attack_logs_source_ip'), table_name='attack_logs')
    op.drop_constraint(None, 'attack_logs', type_='foreignkey')
    op.drop_column('attack_logs', 'mitigated_at')
    op.drop_column('attack_logs', 'mitigation_notes')
    op.drop_column('attack_logs', 'resolved_at')
    op.drop_column('attack_logs', 'updated_at')
    op.drop_column('attack_logs', 'security_event_id')
    op.drop_column('attack_logs', 'created_at')
    op.add_column('security_events', sa.Column('timestamp', sa.DateTime(), nullable=False))
    op.add_column('security_events', sa.Column('is_mitigated', sa.Boolean(), nullable=True))
    op.add_column('security_events', sa.Column('mitigation_timestamp', sa.DateTime(timezone=True), nullable=True))
    op.add_column('security_events', sa.Column('mitigation_details', sa.JSON(), nullable=True))
    op.add_column('security_events', sa.Column('is_resolved', sa.Boolean(), nullable=True))
    op.add_column('security_events', sa.Column('resolution_timestamp', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('security_events', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index(op.f('ix_security_events_event_type'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_source_ip'), table_name='security_events')
    op.drop_column('security_events', 'status')
    op.drop_column('security_events', 'mitigation_notes')
    op.drop_column('security_events', 'resolved_at')
    op.drop_column('security_events', 'updated_at')
    op.drop_column('security_events', 'mitigation_result')
    op.drop_column('security_events', 'created_at')
    op.drop_column('security_events', 'resolved_by')
    op.add_column('server_health', sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('server_health', sa.Column('is_healthy', sa.Boolean(), nullable=True))
    op.add_column('server_health', sa.Column('response_time', sa.Float(), nullable=True))
    op.add_column('server_health', sa.Column('status_code', sa.Integer(), nullable=True))
    op.add_column('server_health', sa.Column('network_usage', sa.JSON(), nullable=True))
    op.add_column('server_health', sa.Column('metrics', sa.JSON(), nullable=True))
    op.alter_column('server_health', 'cpu_usage',
               existing_type=sa.FLOAT(),
               nullable=True)
    op.alter_column('server_health', 'memory_usage',
               existing_type=sa.FLOAT(),
               nullable=True)
    op.alter_column('server_health', 'disk_usage',
               existing_type=sa.FLOAT(),
               nullable=True)
    op.drop_column('server_health', 'response_time_ms')
    op.drop_column('server_health', 'status')
    op.drop_column('server_health', 'uptime_seconds')
    op.drop_column('server_health', 'checked_at')
    op.drop_column('server_health', 'is_responding')
    op.add_column('server_stats', sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('server_stats', sa.Column('successful_requests', sa.Integer(), nullable=True))
    op.add_column('server_stats', sa.Column('failed_requests', sa.Integer(), nullable=True))
    op.add_column('server_stats', sa.Column('avg_response_time', sa.Float(), nullable=True))
    op.add_column('server_stats', sa.Column('bytes_sent', sa.Integer(), nullable=True))
    op.add_column('server_stats', sa.Column('bytes_received', sa.Integer(), nullable=True))
    op.add_column('server_stats', sa.Column('error_count', sa.Integer(), nullable=True))
    op.add_column('server_stats', sa.Column('error_types', sa.JSON(), nullable=True))
    op.add_column('server_stats', sa.Column('cpu_usage_avg', sa.Float(), nullable=True))
    op.add_column('server_stats', sa.Column('memory_usage_avg', sa.Float(), nullable=True))
    op.add_column('server_stats', sa.Column('disk_usage_avg', sa.Float(), nullable=True))
    op.add_column('server_stats', sa.Column('metrics', sa.JSON(), nullable=True))
    op.drop_column('server_stats', 'error_rate')
    op.drop_column('server_stats', 'active_connections')
    op.drop_column('server_stats', 'recorded_at')
    op.drop_column('server_stats', 'bandwidth_usage')
    op.add_column('servers', sa.Column('is_healthy', sa.Boolean(), nullable=True))
    op.add_column('servers', sa.Column('is_load_balanced', sa.Boolean(), nullable=True))
    op.add_column('servers', sa.Column('weight', sa.Integer(), nullable=True))
    op.add_column('servers', sa.Column('max_connections', sa.Integer(), nullable=True))
    op.add_column('servers', sa.Column('current_connections', sa.Integer(), nullable=True))
    op.add_column('servers', sa.Column('zerotier_node_id', sa.String(length=10), nullable=True))
    op.add_column('servers', sa.Column('zerotier_ip', sa.String(length=45), nullable=True))
    op.alter_column('servers', 'health_status',
               existing_type=sa.VARCHAR(),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index(op.f('ix_servers_ip_address'), table_name='servers')
    op.drop_index(op.f('ix_servers_name'), table_name='servers')
    op.drop_column('servers', 'zerotier_address')
    op.drop_column('servers', 'load_balancer_weight')
    op.drop_column('servers', 'is_zerotier_connected')
    op.drop_column('servers', 'is_active_in_lb')
    op.add_column('traffic_stats', sa.Column('server_id', sa.Integer(), nullable=True))
    op.add_column('traffic_stats', sa.Column('requests_per_second', sa.Float(), nullable=True))
    op.add_column('traffic_stats', sa.Column('bandwidth_usage', sa.JSON(), nullable=True))
    op.add_column('traffic_stats', sa.Column('active_connections', sa.Integer(), nullable=True))
    op.add_column('traffic_stats', sa.Column('error_rate', sa.Float(), nullable=True))
    op.add_column('traffic_stats', sa.Column('details', sa.JSON(), nullable=True))
    op.alter_column('traffic_stats', 'timestamp',
               existing_type=sa.DATETIME(),
               nullable=False)
    op.create_foreign_key(None, 'traffic_stats', 'servers', ['server_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'traffic_stats', type_='foreignkey')
    op.alter_column('traffic_stats', 'timestamp',
               existing_type=sa.DATETIME(),
               nullable=True)
    op.drop_column('traffic_stats', 'details')
    op.drop_column('traffic_stats', 'error_rate')
    op.drop_column('traffic_stats', 'active_connections')
    op.drop_column('traffic_stats', 'bandwidth_usage')
    op.drop_column('traffic_stats', 'requests_per_second')
    op.drop_column('traffic_stats', 'server_id')
    op.add_column('servers', sa.Column('is_active_in_lb', sa.BOOLEAN(), nullable=True))
    op.add_column('servers', sa.Column('is_zerotier_connected', sa.BOOLEAN(), nullable=True))
    op.add_column('servers', sa.Column('load_balancer_weight', sa.FLOAT(), nullable=True))
    op.add_column('servers', sa.Column('zerotier_address', sa.VARCHAR(), nullable=True))
    op.create_index(op.f('ix_servers_name'), 'servers', ['name'], unique=False)
    op.create_index(op.f('ix_servers_ip_address'), 'servers', ['ip_address'], unique=False)
    op.alter_column('servers', 'health_status',
               existing_type=sa.JSON(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('servers', 'zerotier_ip')
    op.drop_column('servers', 'zerotier_node_id')
    op.drop_column('servers', 'current_connections')
    op.drop_column('servers', 'max_connections')
    op.drop_column('servers', 'weight')
    op.drop_column('servers', 'is_load_balanced')
    op.drop_column('servers', 'is_healthy')
    op.add_column('server_stats', sa.Column('bandwidth_usage', sqlite.JSON(), nullable=False))
    op.add_column('server_stats', sa.Column('recorded_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('server_stats', sa.Column('active_connections', sa.INTEGER(), nullable=True))
    op.add_column('server_stats', sa.Column('error_rate', sa.FLOAT(), nullable=True))
    op.drop_column('server_stats', 'metrics')
    op.drop_column('server_stats', 'disk_usage_avg')
    op.drop_column('server_stats', 'memory_usage_avg')
    op.drop_column('server_stats', 'cpu_usage_avg')
    op.drop_column('server_stats', 'error_types')
    op.drop_column('server_stats', 'error_count')
    op.drop_column('server_stats', 'bytes_received')
    op.drop_column('server_stats', 'bytes_sent')
    op.drop_column('server_stats', 'avg_response_time')
    op.drop_column('server_stats', 'failed_requests')
    op.drop_column('server_stats', 'successful_requests')
    op.drop_column('server_stats', 'timestamp')
    op.add_column('server_health', sa.Column('is_responding', sa.BOOLEAN(), nullable=True))
    op.add_column('server_health', sa.Column('checked_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('server_health', sa.Column('uptime_seconds', sa.FLOAT(), nullable=False))
    op.add_column('server_health', sa.Column('status', sa.VARCHAR(), nullable=False))
    op.add_column('server_health', sa.Column('response_time_ms', sa.FLOAT(), nullable=True))
    op.alter_column('server_health', 'disk_usage',
               existing_type=sa.FLOAT(),
               nullable=False)
    op.alter_column('server_health', 'memory_usage',
               existing_type=sa.FLOAT(),
               nullable=False)
    op.alter_column('server_health', 'cpu_usage',
               existing_type=sa.FLOAT(),
               nullable=False)
    op.drop_column('server_health', 'metrics')
    op.drop_column('server_health', 'network_usage')
    op.drop_column('server_health', 'status_code')
    op.drop_column('server_health', 'response_time')
    op.drop_column('server_health', 'is_healthy')
    op.drop_column('server_health', 'timestamp')
    op.add_column('security_events', sa.Column('resolved_by', sa.VARCHAR(), nullable=True))
    op.add_column('security_events', sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('security_events', sa.Column('mitigation_result', sa.VARCHAR(), nullable=True))
    op.add_column('security_events', sa.Column('updated_at', sa.DATETIME(), nullable=True))
    op.add_column('security_events', sa.Column('resolved_at', sa.DATETIME(), nullable=True))
    op.add_column('security_events', sa.Column('mitigation_notes', sa.VARCHAR(), nullable=True))
    op.add_column('security_events', sa.Column('status', sa.VARCHAR(), nullable=False))
    op.create_index(op.f('ix_security_events_source_ip'), 'security_events', ['source_ip'], unique=False)
    op.create_index(op.f('ix_security_events_event_type'), 'security_events', ['event_type'], unique=False)
    op.alter_column('security_events', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('security_events', 'resolution_timestamp')
    op.drop_column('security_events', 'is_resolved')
    op.drop_column('security_events', 'mitigation_details')
    op.drop_column('security_events', 'mitigation_timestamp')
    op.drop_column('security_events', 'is_mitigated')
    op.drop_column('security_events', 'timestamp')
    op.add_column('attack_logs', sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False))
    op.add_column('attack_logs', sa.Column('security_event_id', sa.INTEGER(), nullable=True))
    op.add_column('attack_logs', sa.Column('updated_at', sa.DATETIME(), nullable=True))
    op.add_column('attack_logs', sa.Column('resolved_at', sa.DATETIME(), nullable=True))
    op.add_column('attack_logs', sa.Column('mitigation_notes', sa.VARCHAR(), nullable=True))
    op.add_column('attack_logs', sa.Column('mitigated_at', sa.DATETIME(), nullable=True))
    op.create_foreign_key(None, 'attack_logs', 'security_events', ['security_event_id'], ['id'])
    op.create_index(op.f('ix_attack_logs_source_ip'), 'attack_logs', ['source_ip'], unique=False)
    op.create_index(op.f('ix_attack_logs_attack_type'), 'attack_logs', ['attack_type'], unique=False)
    op.alter_column('attack_logs', 'detected_at',
               existing_type=sa.DATETIME(),
               nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('attack_logs', 'duration_seconds',
               existing_type=sa.FLOAT(),
               nullable=False)
    op.alter_column('attack_logs', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('attack_logs', 'bandwidth_used')
    op.drop_column('attack_logs', 'action')
    op.drop_column('attack_logs', 'severity')
    op.drop_column('attack_logs', 'target')
    op.add_column('alerts', sa.Column('source', sa.VARCHAR(), nullable=False))
    op.add_column('alerts', sa.Column('description', sa.VARCHAR(), nullable=False))
    op.add_column('alerts', sa.Column('title', sa.VARCHAR(), nullable=False))
    op.add_column('alerts', sa.Column('security_event_id', sa.INTEGER(), nullable=True))
    op.create_foreign_key(None, 'alerts', 'security_events', ['security_event_id'], ['id'])
    # ### end Alembic commands ### 